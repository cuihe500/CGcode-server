{"version":3,"sources":["webpack://WebglAddon/webpack/universalModuleDefinition","webpack://WebglAddon/./src/GlyphRenderer.ts","webpack://WebglAddon/./src/RectangleRenderer.ts","webpack://WebglAddon/./src/RenderModel.ts","webpack://WebglAddon/./src/TypedArray.ts","webpack://WebglAddon/./src/WebglAddon.ts","webpack://WebglAddon/./src/WebglRenderer.ts","webpack://WebglAddon/./src/WebglUtils.ts","webpack://WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://WebglAddon/../src/browser/Color.ts","webpack://WebglAddon/../src/browser/renderer/atlas/Constants.ts","webpack://WebglAddon/../src/common/EventEmitter.ts","webpack://WebglAddon/../src/common/Lifecycle.ts","webpack://WebglAddon/../src/common/TypedArrayUtils.ts","webpack://WebglAddon/../src/common/buffer/AttributeData.ts","webpack://WebglAddon/../src/common/buffer/CellData.ts","webpack://WebglAddon/../src/common/buffer/Constants.ts","webpack://WebglAddon/../src/common/input/TextDecoder.ts","webpack://WebglAddon/webpack/bootstrap","webpack://WebglAddon/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","INDICES_PER_CELL","BYTES_PER_CELL","Float32Array","BYTES_PER_ELEMENT","_terminal","_colors","_gl","_dimensions","_activeBuffer","_vertices","count","attributes","attributesBuffers","selectionAttributes","gl","this","program","throwIfFalsy","createProgram","_program","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","onResize","beginFrame","_atlas","updateCell","x","y","code","bg","fg","chars","_updateCell","array","rasterizedGlyph","i","cols","NULL_CELL_CODE","WHITESPACE_CELL_CODE","undefined","length","getRasterizedGlyphCombinedChar","getRasterizedGlyph","offset","scaledCharLeft","scaledCharTop","size","scaledCanvasWidth","scaledCanvasHeight","texturePositionClipSpace","sizeClipSpace","fill","updateSelection","model","terminal","slice","selectionOpaque","rgba","selection","columnSelectMode","startCol","width","endCol","height","viewportCappedEndRow","viewportCappedStartRow","_updateSelectionRange","viewportStartRow","startRowEndCol","middleRowsCount","Math","max","viewportEndRow","line","row","buffer","active","viewportY","RENDER_MODEL_INDICIES_PER_CELL","cells","RENDER_MODEL_FG_OFFSET","workCell","AttributeData","RENDER_MODEL_BG_OFFSET","getBgColorMode","c","_getColorFromAnsiIndex","getBgColor","arr","toColorRGB","c2","background","COMBINED_CHAR_BIT_MASK","getLine","getCell","getChars","idx","ansi","Error","viewport","canvas","newCount","rows","setColors","render","renderModel","isSelectionVisible","useProgram","activeBuffer","bufferLength","lineLengths","si","sub","subarray","set","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","cacheCanvas","generateMipmap","uniformMatrix4fv","PROJECTION_MATRIX","uniform2f","drawElementsInstanced","TRIANGLES","setAtlas","atlas","setDimensions","dimensions","GlyphRenderer","BYTES_PER_RECTANGLE","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","_selectionFloat","_addRectangleFloat","scaledCellWidth","scaledCellHeight","hasSelection","INDICES_PER_RECTANGLE","updateBackgrounds","vertices","rectangleCount","currentStartX","currentBg","currentFg","currentInverse","modelIndex","inverse","_updateRectangle","startX","endX","foreground","expandFloat32Array","x1","y1","r","g","b","_addRectangle","a","color","RectangleRenderer","Uint32Array","resize","indexCount","clear","clearSelection","RenderModel","sliceFallback","start","end","min","result","constructor","_preserveDrawingBuffer","activate","element","renderService","_core","_renderService","colors","_colorManager","_renderer","WebglRenderer","setRenderer","dispose","_createRenderer","textureAtlas","clearTextureAtlas","clearCharAtlas","WebglAddon","preserveDrawingBuffer","_model","_workCell","CellData","_onRequestRedraw","EventEmitter","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","scaledCharWidth","scaledCharHeight","canvasWidth","canvasHeight","actualCellWidth","actualCellHeight","_devicePixelRatio","window","devicePixelRatio","_updateDimensions","_canvas","document","createElement","contextAttributes","antialias","depth","getContext","appendChild","_rectangleRenderer","_glyphRenderer","onCharSizeChanged","_isAttached","body","contains","event","forEach","l","removeChild","_charAtlas","reset","_refreshCharAtlas","onDevicePixelRatioChange","style","onBlur","onFocus","onSelectionChanged","_updateSelectionModel","fire","onCursorMove","onOptionsChanged","acquireCharAtlas","warmUp","clearTexture","_updateModel","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","_charSizeService","onGridChanged","ydisp","lines","get","loadCell","getCode","floor","ceil","getOption","round","Disposable","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","value","vertexSource","fragmentSource","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","newLength","newArray","charAtlasCache","newConfig","generateConfig","ownedByIndex","entry","ownedBy","indexOf","configEquals","config","splice","push","newEntry","WebglCharAtlas","index","NULL_COLOR","css","clonedColors","cursor","cursorAccent","selectionTransparent","contrastCache","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","TEXTURE_WIDTH","TEXTURE_HEIGHT","TEXTURE_CAPACITY","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","_config","_didWarmUp","_cacheMap","_cacheMapCombined","_currentRowY","_currentRowX","_currentRowHeight","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","alpha","_tmpCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","parentElement","_doWarmUp","_drawToCache","DEFAULT_COLOR","clearRect","rasterizedGlyphSet","rasterizedGlyphSetBg","_getBackgroundColor","bgColorMode","bgColor","toPaddedHex","_getForegroundCss","fgColorMode","fgColor","bold","minimumContrastCss","_getMinimumContrastCss","channels","toCss","substr","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getCss","bgRgba","fgRgba","ensureContrastRatio","setCss","codeOrChars","String","fromCharCode","save","isInvisible","isBold","isInverse","dim","isDim","italic","isItalic","getFgColor","getFgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fillStyle","fillRect","fontStyle","font","textBaseline","globalAlpha","DIM_OPACITY","fillText","restore","imageData","getImageData","isEmpty","data","clearColor","_findGlyphBoundingBox","clippedImageData","_clipImageData","putImageData","boundingBox","found","alphaOffset","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","s","toString","_container","id","zIndex","_alpha","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","classList","add","_initCanvas","_ctx","_clearAll","startRow","endRow","colorSet","_setTransparency","oldCanvas","cloneNode","replaceChild","_fillCells","_fillBottomLineAtCells","_fillLeftLineAtCell","_strokeRectAtCell","lineWidth","strokeRect","_clearCells","_fillCharTrueColor","cell","_getFont","_clipRow","beginPath","rect","clip","BaseRenderLayer","BLINK_INTERVAL","container","_onRequestRefreshRowsEvent","_cell","_state","isFocused","_cursorRenderers","_renderBarCursor","bind","_renderBlockCursor","_renderUnderlineCursor","_clearCursor","_cursorBlinkStateManager","pause","cursorY","resume","CursorBlinkStateManager","_render","restartBlinkAnimation","isPaused","triggeredByAnimationFrame","_coreService","isCursorInitialized","isCursorHidden","baseY","viewportRelativeCursorY","cursorX","content","isTerminalFocused","cursorStyle","_renderBlurCursor","getWidth","isCursorVisible","strokeStyle","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","setTimeout","time","setInterval","activeElement","textarea","hasFocus","linkifier","onShowLinkUnderline","e","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","linkifier2","_clearCurrentLink","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","is256Color","rgb","contrastRatio","l1","l2","toRgba","blend","fgR","fgG","fgB","bgR","bgG","bgB","isOpaque","ratio","toColor","opaque","rgbaColor","toChannels","opacity","parseInt","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","CHAR_ATLAS_CELL_SPACING","_listeners","_disposed","_event","listener","arg1","arg2","queue","call","from","to","_disposables","_isDisposed","register","d","unregister","disposeArray","disposables","fillFallback","extended","ExtendedAttrs","fromColorRGB","clone","newObj","isUnderline","isBlink","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","hasExtendedAttrs","updateExtended","getUnderlineColor","underlineColor","getUnderlineColorMode","isUnderlineColorRGB","isUnderlineColorPalette","isUnderlineColorDefault","getUnderlineStyle","underlineStyle","combinedData","fromCharData","obj","setFromCharData","isCombined","stringFromCodePoint","charCodeAt","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","second","CHAR_DATA_WIDTH_INDEX","getAsCharData","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","codePoint","codepoint","_interim","decode","input","target","startPos","StringToUtf32","interim","byte1","byte2","byte3","byte4","discardInterim","cp","pos","tmp","missing","fourStop","Utf8ToUtf32","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"xterm-addon-webgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_INDICIES_PER_CELL, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_BG_OFFSET } from './RenderModel';\nimport { fill } from 'common/TypedArrayUtils';\nimport { slice } from './TypedArray';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CODE, Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal, IBufferLine } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  selectionAttributes: Float32Array;\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\nexport class GlyphRenderer {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ],\n    selectionAttributes: new Float32Array(0)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n    const program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this._program = program;\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, chars: string): void {\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, chars);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, chars?: string): void {\n    const terminal = this._terminal;\n\n    const i = (y * terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null/space character\n    if (code === NULL_CELL_CODE || code === WHITESPACE_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    let rasterizedGlyph: IRasterizedGlyph;\n    if (!this._atlas) {\n      return;\n    }\n    if (chars && chars.length > 1) {\n      rasterizedGlyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg);\n    } else {\n      rasterizedGlyph = this._atlas.getRasterizedGlyph(code, bg, fg);\n    }\n\n    // Fill empty if no glyph was found\n    if (!rasterizedGlyph) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    // a_origin\n    array[i    ] = -rasterizedGlyph.offset.x + this._dimensions.scaledCharLeft;\n    array[i + 1] = -rasterizedGlyph.offset.y + this._dimensions.scaledCharTop;\n    // a_size\n    array[i + 2] = rasterizedGlyph.size.x / this._dimensions.scaledCanvasWidth;\n    array[i + 3] = rasterizedGlyph.size.y / this._dimensions.scaledCanvasHeight;\n    // a_texcoord\n    array[i + 4] = rasterizedGlyph.texturePositionClipSpace.x;\n    array[i + 5] = rasterizedGlyph.texturePositionClipSpace.y;\n    // a_texsize\n    array[i + 6] = rasterizedGlyph.sizeClipSpace.x;\n    array[i + 7] = rasterizedGlyph.sizeClipSpace.y;\n    // a_cellpos only changes on resize\n  }\n\n  public updateSelection(model: IRenderModel): void {\n    const terminal = this._terminal;\n\n    this._vertices.selectionAttributes = slice(this._vertices.attributes, 0);\n\n    const bg = (this._colors.selectionOpaque.rgba >>> 8) | Attributes.CM_RGB;\n\n    if (model.selection.columnSelectMode) {\n      const startCol = model.selection.startCol;\n      const width = model.selection.endCol - startCol;\n      const height = model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow + 1;\n      for (let y = model.selection.viewportCappedStartRow; y < model.selection.viewportCappedStartRow + height; y++) {\n        this._updateSelectionRange(startCol, startCol + width, y, model, bg);\n      }\n    } else {\n      // Draw first row\n      const startCol = model.selection.viewportStartRow === model.selection.viewportCappedStartRow ? model.selection.startCol : 0;\n      const startRowEndCol = model.selection.viewportCappedStartRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n      this._updateSelectionRange(startCol, startRowEndCol, model.selection.viewportCappedStartRow, model, bg);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow - 1, 0);\n      for (let y = model.selection.viewportCappedStartRow + 1; y <= model.selection.viewportCappedStartRow + middleRowsCount; y++) {\n        this._updateSelectionRange(0, startRowEndCol, y, model, bg);\n      }\n\n      // Draw final row\n      if (model.selection.viewportCappedStartRow !== model.selection.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.selection.viewportEndRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n        this._updateSelectionRange(0, endCol, model.selection.viewportCappedEndRow, model, bg);\n      }\n    }\n  }\n\n  private _updateSelectionRange(startCol: number, endCol: number, y: number, model: IRenderModel, bg: number): void {\n    const terminal = this._terminal;\n    const row = y + terminal.buffer.active.viewportY;\n    let line: IBufferLine | undefined;\n    for (let x = startCol; x < endCol; x++) {\n      const offset = (y * this._terminal.cols + x) * RENDER_MODEL_INDICIES_PER_CELL;\n      const code = model.cells[offset];\n      let fg = model.cells[offset + RENDER_MODEL_FG_OFFSET];\n      if (fg & FgFlags.INVERSE) {\n        const workCell = new AttributeData();\n        workCell.fg = fg;\n        workCell.bg = model.cells[offset + RENDER_MODEL_BG_OFFSET];\n        // Get attributes from fg (excluding inverse) and resolve inverse by pullibng rgb colors\n        // from bg. This is needed since the inverse fg color should be based on the original bg\n        // color, not on the selection color\n        fg = (fg & ~(Attributes.CM_MASK | Attributes.RGB_MASK | FgFlags.INVERSE));\n        switch (workCell.getBgColorMode()) {\n          case Attributes.CM_P16:\n          case Attributes.CM_P256:\n            const c = this._getColorFromAnsiIndex(workCell.getBgColor()).rgba;\n            fg |= (c >> 8) & Attributes.RED_MASK | (c >> 8) & Attributes.GREEN_MASK | (c >> 8) & Attributes.BLUE_MASK;\n          case Attributes.CM_RGB:\n            const arr = AttributeData.toColorRGB(workCell.getBgColor());\n            fg |= arr[0] << Attributes.RED_SHIFT | arr[1] << Attributes.GREEN_SHIFT | arr[2] << Attributes.BLUE_SHIFT;\n          case Attributes.CM_DEFAULT:\n          default:\n            const c2 = this._colors.background.rgba;\n            fg |= (c2 >> 8) & Attributes.RED_MASK | (c2 >> 8) & Attributes.GREEN_MASK | (c2 >> 8) & Attributes.BLUE_MASK;\n        }\n        fg |= Attributes.CM_RGB;\n      }\n      if (code & COMBINED_CHAR_BIT_MASK) {\n        if (!line) {\n          line = terminal.buffer.active.getLine(row);\n        }\n        const chars = line!.getCell(x)!.getChars();\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg, chars);\n      } else {\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg);\n      }\n    }\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._colors.ansi[idx];\n  }\n\n  public onResize(): void {\n    const terminal = this._terminal;\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Update vertices\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n    if (this._vertices.count !== newCount) {\n      this._vertices.count = newCount;\n      this._vertices.attributes = new Float32Array(newCount);\n      for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      }\n\n      let i = 0;\n      for (let y = 0; y < terminal.rows; y++) {\n        for (let x = 0; x < terminal.cols; x++) {\n          this._vertices.attributes[i + 8] = x / terminal.cols;\n          this._vertices.attributes[i + 9] = y / terminal.rows;\n          i += INDICES_PER_CELL;\n        }\n      }\n    }\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel, isSelectionVisible: boolean): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = (isSelectionVisible ? this._vertices.selectionAttributes : this._vertices.attributes).subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = (a_position + (a_unitquad * a_size)) / u_resolution;\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  selection: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nexport class RectangleRenderer {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _selectionFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY),\n    selection: new Float32Array(3 * INDICES_PER_RECTANGLE)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n\n    // Uniform locations\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n\n    // Bind selection buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.selection, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, 3);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n    this._selectionFloat = this._colorToFloat32Array(this._colors.selectionOpaque);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateSelection(model: ISelectionRenderModel): void {\n    const terminal = this._terminal;\n\n    if (!model.hasSelection) {\n      fill(this._vertices.selection, 0, 0);\n      return;\n    }\n\n    if (model.columnSelectMode) {\n      const startCol = model.startCol;\n      const width = model.endCol - startCol;\n      const height = model.viewportCappedEndRow - model.viewportCappedStartRow + 1;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        width * this._dimensions.scaledCellWidth,\n        height * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n      fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE);\n    } else {\n      // Draw first row\n      const startCol = model.viewportStartRow === model.viewportCappedStartRow ? model.startCol : 0;\n      const startRowEndCol = model.viewportCappedStartRow === model.viewportEndRow ? model.endCol : terminal.cols;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        (startRowEndCol - startCol) * this._dimensions.scaledCellWidth,\n        this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.viewportCappedEndRow - model.viewportCappedStartRow - 1, 0);\n      this._addRectangleFloat(\n        this._vertices.selection,\n        INDICES_PER_RECTANGLE,\n        0,\n        (model.viewportCappedStartRow + 1) * this._dimensions.scaledCellHeight,\n        terminal.cols * this._dimensions.scaledCellWidth,\n        middleRowsCount * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw final row\n      if (model.viewportCappedStartRow !== model.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.viewportEndRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n        this._addRectangleFloat(\n          this._vertices.selection,\n          INDICES_PER_RECTANGLE * 2,\n          0,\n          model.viewportCappedEndRow * this._dimensions.scaledCellHeight,\n          endCol * this._dimensions.scaledCellWidth,\n          this._dimensions.scaledCellHeight,\n          this._selectionFloat\n        );\n      } else {\n        fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE * 2);\n      }\n    }\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    let rectangleCount = 1;\n\n    for (let y = 0; y < terminal.rows; y++) {\n      let currentStartX = -1;\n      let currentBg = 0;\n      let currentFg = 0;\n      let currentInverse = false;\n      for (let x = 0; x < terminal.cols; x++) {\n        const modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        const bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        const fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        const inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    let rgba: number | undefined;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    const x1 = startX * this._dimensions.scaledCellWidth;\n    const y1 = y * this._dimensions.scaledCellHeight;\n    const r = ((rgba >> 24) & 0xFF) / 255;\n    const g = ((rgba >> 16) & 0xFF) / 255;\n    const b = ((rgba >> 8 ) & 0xFF) / 255;\n\n    this._addRectangle(vertices.attributes, offset, x1, y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, r, g, b, 1);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 3;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      columnSelectMode: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\nexport function slice<T extends TypedArray>(array: T, start?: number, end?: number): T {\n  // all modern engines that support .slice\n  if (array.slice) {\n    return array.slice(start, end) as T;\n  }\n  return sliceFallback(array, start, end);\n}\n\nexport function sliceFallback<T extends TypedArray>(array: T, start: number = 0, end: number = array.length): T {\n  if (start < 0) {\n    start = (array.length + start) % array.length;\n  }\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  start = Math.min(start, end);\n\n  const result: T = new (array.constructor as any)(end - start);\n  for (let i = 0; i < end - start; ++i) {\n    result[i] = array[i + start];\n  }\n  return result;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService = (<any>terminal)._core._renderService;\n    const colors: IColorSet = (<any>terminal)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, this._preserveDrawingBuffer);\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearCharAtlas();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { ITerminal, IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: RectangleRenderer;\n  private _glyphRenderer: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._colors, this._core),\n      new CursorRenderLayer(this._core.screenElement!, 3, this._colors, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n    this._core.screenElement!.appendChild(this._canvas);\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n\n    this._isAttached = document.body.contains(this._core.screenElement!);\n  }\n\n  public dispose(): void {\n    this._renderLayers.forEach(l => l.dispose());\n    this._core.screenElement!.removeChild(this._canvas);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    this._renderLayers.forEach(l => {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    });\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions));\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.canvasHeight}px`;\n\n    this._rectangleRenderer.onResize();\n    if (this._model.selection.hasSelection) {\n      // Update selection as dimensions have changed\n      this._rectangleRenderer.updateSelection(this._model.selection);\n    }\n\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    this._renderLayers.forEach(l => l.onBlur(this._terminal));\n  }\n\n  public onFocus(): void {\n    this._renderLayers.forEach(l => l.onFocus(this._terminal));\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._renderLayers.forEach(l => l.onSelectionChanged(this._terminal, start, end, columnSelectMode));\n\n    this._updateSelectionModel(start, end, columnSelectMode);\n\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public onCursorMove(): void {\n    this._renderLayers.forEach(l => l.onCursorMove(this._terminal));\n  }\n\n  public onOptionsChanged(): void {\n    this._renderLayers.forEach(l => l.onOptionsChanged(this._terminal));\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    this._charAtlas = atlas as WebglCharAtlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clearCharAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._model.clear();\n    this._updateModel(0, this._terminal.rows - 1);\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public clear(): void {\n    this._renderLayers.forEach(l => l.reset(this._terminal));\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (document.body.contains(this._core.screenElement!) && (this._core as any)._charSizeService.width && (this._core as any)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n      this._updateSelectionModel(undefined, undefined);\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model, this._model.selection.hasSelection);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      for (let x = 0; x < terminal.cols; x++) {\n        line.loadCell(x, this._workCell);\n\n        const chars = this._workCell.getChars();\n        let code = this._workCell.getCode();\n        const i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._workCell.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._workCell.fg) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code = code | COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._workCell.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._workCell.fg;\n\n        this._glyphRenderer.updateCell(x, y, code, this._workCell.bg, this._workCell.fg, chars);\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n    if (this._model.selection.hasSelection) {\n      // Model could be updated but the selection is unchanged\n      this._glyphRenderer.updateSelection(this._model);\n    }\n  }\n\n  private _updateSelectionModel(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      this._rectangleRenderer.updateSelection(this._model.selection);\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      this._rectangleRenderer.updateSelection(this._model.selection);\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.columnSelectMode = columnSelectMode;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n\n    this._rectangleRenderer.updateSelection(this._model.selection);\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(this._core as any)._charSizeService.width || !(this._core as any)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n\n    // NOTE: ceil fixes sometime, floor does others :s\n\n    this.dimensions.scaledCharWidth = Math.floor((this._core as any)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil((this._core as any)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.getOption('lineHeight'));\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._terminal.getOption('lineHeight') === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.getOption('letterSpacing'));\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.getOption('letterSpacing') / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // this.dimensions.scaledCanvasHeight = this.dimensions.canvasHeight * devicePixelRatio;\n    // this.dimensions.scaledCanvasWidth = this.dimensions.canvasWidth * devicePixelRatio;\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\n    // measured in CSS pixels, but the actual char size on the canvas can\n    // differ.\n    // this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n    // this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n\n    // This fixes 110% and 125%, not 150% or 175% though\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionTransparent: NULL_COLOR,\n    selectionOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.getOption('fontFamily'),\n    fontSize: terminal.getOption('fontSize'),\n    fontWeight: terminal.getOption('fontWeight') as FontWeight,\n    fontWeightBold: terminal.getOption('fontWeightBold') as FontWeight,\n    allowTransparency: terminal.getOption('allowTransparency'),\n    drawBoldTextInBrightColors: terminal.getOption('drawBoldTextInBrightColors'),\n    minimumContrastRatio: terminal.getOption('minimumContrastRatio'),\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY } from 'browser/renderer/atlas/Constants';\nimport { IRasterizedGlyph, IBoundingBox, IRasterizedGlyphSet } from '../Types';\nimport { DEFAULT_COLOR, Attributes } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'browser/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { channels, rgba } from 'browser/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: { [code: number]: IRasterizedGlyphSet } = {};\n  private _cacheMapCombined: { [chars: string]: IRasterizedGlyphSet } = {};\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Since glyphs are expected to be around the same height, the packing\n  // strategy used it to fill a row with glyphs while keeping track of the\n  // tallest glyph in the row. Once the row is full a new row is started at\n  // (0,lastRow+lastRowTallestGlyph).\n  private _currentRowY: number = 0;\n  private _currentRowX: number = 0;\n  private _currentRowHeight: number = 0;\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private _config: ICharAtlasConfig\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', {alpha: true}));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCharWidth * 2 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCharHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {alpha: this._config.allowTransparency}));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR);\n      this._cacheMap[i] = {\n        [DEFAULT_COLOR]: {\n          [DEFAULT_COLOR]: rasterizedGlyph\n        }\n      };\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRowY > TEXTURE_CAPACITY) {\n      this.clearTexture();\n      this.warmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public clearTexture(): void {\n    if (this._currentRowX === 0 && this._currentRowY === 0) {\n      return;\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._cacheMap = {};\n    this._cacheMapCombined = {};\n    this._currentRowHeight = 0;\n    this._currentRowX = 0;\n    this._currentRowY = 0;\n    this._didWarmUp = false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMapCombined[chars];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMapCombined[chars] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(chars, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  public getRasterizedGlyph(code: number, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMap[code];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMap[code] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(code, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor);\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        return {\n          rgba: bgColor << 8,\n          css: `#${toPaddedHex(arr[0])}${toPaddedHex(arr[1])}${toPaddedHex(arr[2])}`\n        };\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground;\n        }\n        return this._config.colors.background;\n    }\n  }\n\n  private _getForegroundCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string {\n    const minimumContrastCss = this._getMinimumContrastCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n    if (minimumContrastCss) {\n      return minimumContrastCss;\n    }\n\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).css;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        return channels.toCss(arr[0], arr[1], arr[2]);\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          const bg = this._config.colors.background.css;\n          if (bg.length === 9) {\n            // Remove bg alpha channel if present\n            return bg.substr(0, 7);\n          }\n          return bg;\n        }\n        return this._config.colors.foreground.css;\n    }\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string | undefined {\n    if (this._config.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getCss(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setCss(bg, fg, null);\n      return undefined;\n    }\n\n    const css = channels.toCss(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setCss(bg, fg, css);\n\n    return css;\n  }\n\n  private _drawToCache(code: number, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(chars: string, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = 'middle';\n\n    this._tmpCtx.fillStyle = this._getForegroundCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw the character\n    this._tmpCtx.fillText(chars, TMP_CANVAS_GLYPH_PADDING, TMP_CANVAS_GLYPH_PADDING + this._config.scaledCharHeight / 2);\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // TODO: Support transparency\n    // let isEmpty = false;\n    // if (!this._config.allowTransparency) {\n    //   isEmpty = clearColor(imageData, backgroundColor);\n    // }\n\n    // Clear out the background color and determine if the glyph is empty.\n    const isEmpty = clearColor(imageData, backgroundColor);\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Check if there is enough room in the current row and go to next if needed\n    if (this._currentRowX + this._config.scaledCharWidth > TEXTURE_WIDTH) {\n      this._currentRowX = 0;\n      this._currentRowY += this._currentRowHeight;\n      this._currentRowHeight = 0;\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = this._currentRowX;\n    rasterizedGlyph.texturePosition.y = this._currentRowY;\n    rasterizedGlyph.texturePositionClipSpace.x = this._currentRowX / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = this._currentRowY / TEXTURE_HEIGHT;\n\n    // Update atlas current row\n    this._currentRowHeight = Math.max(this._currentRowHeight, rasterizedGlyph.size.y);\n    this._currentRowX += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox): IRasterizedGlyph {\n    boundingBox.top = 0;\n    let found = false;\n    for (let y = 0; y < this._tmpCanvas.height; y++) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < this._tmpCanvas.width; x++) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = this._tmpCanvas.width;\n    found = false;\n    for (let x = this._tmpCanvas.width - 1; x >= 0; x--) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = this._tmpCanvas.height;\n    found = false;\n    for (let y = this._tmpCanvas.height - 1; y >= 0; y--) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + TMP_CANVAS_GLYPH_PADDING,\n        y: -boundingBox.top + TMP_CANVAS_GLYPH_PADDING\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n\nfunction toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._container.removeChild(this._canvas);\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', {alpha: this._alpha}));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = 'middle';\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._scaledCellWidth + this._scaledCharLeft,\n      y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      terminal.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.getOption('fontWeightBold') : terminal.getOption('fontWeight');\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.getOption('fontSize') * window.devicePixelRatio}px ${terminal.getOption('fontFamily')}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRedrawEvent>\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this.onOptionsChanged(terminal);\n    }\n  }\n\n  public onBlur(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.getOption('cursorBlink')) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    // TODO: Need to expose API for this\n    if (!(terminal as any)._core._coreService.isCursorInitialized || (terminal as any)._core._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.active.baseY + terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.active.viewportY;\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(terminal.buffer.active.cursorX, terminal.cols - 1);\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!isTerminalFocused(terminal)) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.getOption('cursorStyle');\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === isTerminalFocused(terminal) &&\n          this._state.style === terminal.getOption('cursorStyle') &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.getOption('cursorStyle') || 'block'](terminal, cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.getOption('cursorStyle');\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.getOption('cursorWidth'));\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isTerminalFocused(terminal)) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n\nfunction isTerminalFocused(terminal: Terminal): boolean {\n  return document.activeElement === terminal.textarea && document.hasFocus();\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { ITerminal, IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ITerminal) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    terminal.linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    switch (css.length) {\n      case 7: // #rrggbb\n        return {\n          css,\n          rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n        };\n      case 9: // #rrggbbaa\n        return {\n          css,\n          rgba: parseInt(css.slice(1), 16) >>> 0\n        };\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        return reduceLuminance(bgRgba, fgRgba, ratio);\n      }\n      return increaseLuminance(bgRgba, fgRgba, ratio);\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number): IColor {\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number   { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number      { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number     { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number    { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number       { return this.bg & BgFlags.DIM; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..31 (32th bit unused)\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(795);\n"],"sourceRoot":""}